#include <iostream>  // Підключаємо бібліотеку для роботи з введенням/виведенням
#include <string>    // Підключаємо бібліотеку для роботи з рядками
#include <cctype>    // Підключаємо бібліотеку для перевірки типів символів (цифри, літери тощо)

using namespace std;  // Використовуємо стандартний простір імен для уникнення необхідності писати std::

// Функція для перевірки, чи належить рядок мові L(V)
bool recognizeString(const string& input) {
    int state = 0;  // Змінна для збереження поточного стану сканера (початково — стан 0)

    // Перебираємо кожен символ в рядку
    for (size_t i = 0; i < input.length(); ++i) {
        char ch = input[i];  // Зберігаємо поточний символ

        // Виконуємо дію в залежності від поточного стану
        switch (state) {
        case 0: // Початковий стан: очікуємо "+" або "-"
            if (ch == '+' || ch == '-') {  // Якщо символ — це "+" або "-", переходимо до стану 1
                state = 1;
            }
            else {  // Якщо це не "+" і не "-", рядок неправильний
                return false;
            }
            break;

        case 1: // Очікуємо цифри (0-9)
            if (isdigit(ch)) {  // Якщо символ — це цифра, залишаємося у стані 1
                state = 1;  // Оскільки може бути більше цифр, стан не змінюється
            }
            else if (ch >= 'A' && ch <= 'D') {  // Якщо символ — це літера від 'A' до 'D'
                state = 2;  // Переходимо до стану 2, де очікуємо більше літер або крапку
            }
            else if (ch == '.') {  // Якщо символ — це ".", переходимо до фінального стану
                state = 3;  // Перехід до стану 3
            }
            else {  // Якщо символ не відповідає жодному з цих правил, рядок неправильний
                return false;
            }
            break;

        case 2: // Очікуємо більше літер (A-D) або фінальну "."
            if (ch >= 'A' && ch <= 'D') {  // Якщо символ — це літера від 'A' до 'D'
                state = 2;  // Залишаємось у цьому стані, оскільки може бути більше літер
            }
            else if (ch == '.') {  // Якщо символ — це ".", переходимо до стану 3
                state = 3;
            }
            else {  // Якщо символ не відповідає правилам, рядок неправильний
                return false;
            }
            break;

        case 3: // Фінальний стан: очікуємо закінчення рядка після крапки "."
            return i == input.length() - 1;  // Повертаємо true лише якщо крапка була останнім символом
        }
    }

    // Повертаємо true, якщо досягнуто фінального стану (рядок правильний)
    return state == 3;  // Рядок вважається правильним, якщо ми в стані 3 і рядок закінчився
}

int main() {
    string input;  // Створюємо змінну для збереження введеного користувачем рядка
    cout << "Enter a string to recognize: ";  // Виводимо повідомлення для введення рядка
    cin >> input;  // Читаємо рядок з клавіатури

    // Викликаємо функцію recognizeString для перевірки, чи відповідає рядок правилам мови L(V)
    if (recognizeString(input)) {
        cout << "String is valid in language L(V)" << endl;  // Якщо рядок правильний, виводимо повідомлення
    }
    else {
        cout << "Error: String is not valid in language L(V)" << endl;  // Якщо рядок неправильний, виводимо повідомлення про помилку
    }

    return 0;  // Повертаємо 0, що означає успішне завершення програми